{"version":3,"sources":["services/chrono.service.js","components/Chrono/Chrono.js","views/App/App.js","reportWebVitals.js","index.js"],"names":["ChronoService","n","sec","parseInt","hours","Math","floor","minutes","seconds","Chrono","props","state","live","timer","chronoService","window","clearInterval","this","setState","e","setInterval","updateChrono","bind","className","toHHMMSS","onClick","start","stop","reset","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAiBeA,G,uGAdFC,GACL,IAAMC,EAAMC,SAASF,EAAG,IACpBG,EAAQC,KAAKC,MAAMJ,EAAM,MACzBK,EAAUF,KAAKC,OAAOJ,EAAe,KAARE,GAAiB,IAC9CI,EAAUN,EAAe,KAARE,EAA2B,GAAVG,EAMtC,OAJIH,EAAQ,KAAIA,EAAK,WAAOA,IACxBG,EAAU,KAAIA,EAAO,WAAOA,IAC5BC,EAAU,KAAIA,EAAO,WAAOA,IAE1B,GAAN,OAAUJ,EAAV,YAAmBG,EAAnB,YAA8BC,O,MCkCvBC,G,wDA1CX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CAAEC,KAAM,GACrB,EAAKC,MAAQ,KACb,EAAKC,cAAgB,IAAId,EAJX,E,mEAYde,OAAOC,cAAcC,KAAKJ,S,qCAI1BI,KAAKC,SAAS,CAACN,KAAMK,KAAKN,MAAMC,KAAO,M,4BAGrCO,GACFF,KAAKC,SAAS,CAACN,KAAM,M,4BAGnBO,GACFF,KAAKJ,MAAQE,OAAOK,YAAYH,KAAKI,aAAaC,KAAKL,MAAO,O,2BAG7DE,GACDJ,OAAOC,cAAcC,KAAKJ,OAC1BI,KAAKJ,MAAQ,O,+BAIb,OAAO,sBAAKU,UAAU,SAAf,UACH,8BAAMN,KAAKH,cAAcU,SAASP,KAAKN,MAAMC,QAC7C,wBAAQa,QAASR,KAAKS,MAAMJ,KAAKL,MAAOM,UAAU,qBAAlD,mBACA,wBAAQE,QAASR,KAAKU,KAAKL,KAAKL,MAAOM,UAAU,qBAAjD,kBACA,wBAAQE,QAASR,KAAKW,MAAMN,KAAKL,MAAOM,UAAU,qBAAlD,0B,GAtCSM,IAAMC,YCUZC,E,uKANX,OAAO,yBAASR,UAAU,aAAnB,SACL,cAAC,EAAD,U,GAHYM,IAAMC,WCMTE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9dcbf0b8.chunk.js","sourcesContent":["import Chrono from \"../components/Chrono/Chrono\";\n\nclass ChronoService {\n    toHHMMSS(n) {\n        const sec = parseInt(n, 10); // don't forget the second param\n        let hours = Math.floor(sec / 3600);\n        let minutes = Math.floor((sec - (hours * 3600)) / 60);\n        let seconds = sec - (hours * 3600) - (minutes * 60);\n    \n        if (hours < 10) hours = `0${hours}`;\n        if (minutes < 10) minutes = `0${minutes}`;\n        if (seconds < 10) seconds = `0${seconds}`;\n\n        return `${hours}:${minutes}:${seconds}`;\n    }\n}\n\nexport default ChronoService","import React from 'react'\nimport ChronoService from '../../services/chrono.service'\nimport './Chrono.css'\n\nclass Chrono extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { live: 0};\n        this.timer = null;\n        this.chronoService = new ChronoService()\n    }\n\n    // componentDidMount() {\n    //     this.timer = window.setInterval(this.updateChrono.bind(this), 1000)\n    // }\n\n    componentWillUnmount() {\n        window.clearInterval(this.timer)\n    }\n\n    updateChrono() {\n        this.setState({live: this.state.live + 1})\n    }\n\n    reset(e) {\n        this.setState({live: 0})\n    }\n\n    start(e) {\n        this.timer = window.setInterval(this.updateChrono.bind(this), 1000)\n    }\n\n    stop(e) {\n        window.clearInterval(this.timer)\n        this.timer = null;\n    }\n\n    render() {\n        return <div className=\"Chrono\">\n            <div>{this.chronoService.toHHMMSS(this.state.live)}</div>\n            <button onClick={this.start.bind(this)} className=\"btn btn-light mx-5\">Start</button>\n            <button onClick={this.stop.bind(this)} className=\"btn btn-light mx-5\">Stop</button>\n            <button onClick={this.reset.bind(this)} className=\"btn btn-light mx-5\">Reset</button>\n        </div>\n    }\n}\n\nexport default Chrono","import React from 'react';\n\nimport './App.css';\n\nimport Chrono from '../../components/Chrono/Chrono'\n\nclass App extends React.Component {\n  render() {\n    return <article className=\"App d-flex\">\n      <Chrono />\n    </article>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}