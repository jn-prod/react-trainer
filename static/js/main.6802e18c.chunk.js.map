{"version":3,"sources":["services/chrono.service.js","components/Chrono/Chrono.js","views/App/App.js","reportWebVitals.js","index.js"],"names":["ChronoService","n","sec","parseInt","hours","Math","floor","minutes","seconds","Chrono","props","state","timer","toggle","bind","reset","chronoService","this","pause","setState","e","window","clearInterval","setInterval","updateChrono","play","className","toHHMMSS","onClick","label","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAeeA,E,iGAdFC,GACL,IAAMC,EAAMC,SAASF,EAAG,IACpBG,EAAQC,KAAKC,MAAMJ,EAAM,MACzBK,EAAUF,KAAKC,OAAOJ,EAAe,KAARE,GAAiB,IAC9CI,EAAUN,EAAe,KAARE,EAA2B,GAAVG,EAMtC,OAJIH,EAAQ,KAAIA,EAAK,WAAOA,IACxBG,EAAU,KAAIA,EAAO,WAAOA,IAC5BC,EAAU,KAAIA,EAAO,WAAOA,IAE1B,GAAN,OAAUJ,EAAV,YAAmBG,EAAnB,YAA8BC,O,KC2CvBC,G,wDAjDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CAAEV,EAAG,EAAGW,MAAO,MAC5B,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAKE,cAAgB,IAAIhB,EALX,E,mEASdiB,KAAKC,U,qCAILD,KAAKE,SAAS,CAAClB,EAAGgB,KAAKN,MAAMV,EAAI,M,4BAG/BmB,GACFH,KAAKE,SAAS,CAAClB,EAAG,M,2BAGjBmB,GACwB,OAArBH,KAAKN,MAAMC,QAEfS,OAAOC,cAAcL,KAAKN,MAAMC,OAChCK,KAAKE,SAAS,CAACP,MAAOS,OAAOE,YAAYN,KAAKO,aAAaV,KAAKG,MAAO,U,4BAGrEG,GACFC,OAAOC,cAAcL,KAAKN,MAAMC,OAChCK,KAAKE,SAAS,CAACP,MAAO,S,+BAItB,OAAOK,KAAKN,MAAMC,MAAQK,KAAKC,QAAUD,KAAKQ,S,8BAI9C,OAAOR,KAAKN,MAAMC,MAAQ,QAAU,S,+BAIpC,OAAO,sBAAKc,UAAU,SAAf,UACH,8BAAMT,KAAKD,cAAcW,SAASV,KAAKN,MAAMV,KAC7C,wBAAQ2B,QAASX,KAAKJ,OAAQa,UAAU,qBAAxC,SAA8DT,KAAKY,UACnE,wBAAQD,QAASX,KAAKF,MAAOW,UAAU,qBAAvC,0B,GA7CSI,IAAMC,YCUZC,E,uKANX,OAAO,yBAASN,UAAU,aAAnB,SACL,cAAC,EAAD,U,GAHYI,IAAMC,WCMTE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6802e18c.chunk.js","sourcesContent":["class ChronoService {\n    toHHMMSS(n) {\n        const sec = parseInt(n, 10); // don't forget the second param\n        let hours = Math.floor(sec / 3600);\n        let minutes = Math.floor((sec - (hours * 3600)) / 60);\n        let seconds = sec - (hours * 3600) - (minutes * 60);\n    \n        if (hours < 10) hours = `0${hours}`;\n        if (minutes < 10) minutes = `0${minutes}`;\n        if (seconds < 10) seconds = `0${seconds}`;\n\n        return `${hours}:${minutes}:${seconds}`;\n    }\n}\n\nexport default ChronoService","import React from 'react'\nimport ChronoService from '../../services/chrono.service'\nimport './Chrono.css'\n\nclass Chrono extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = { n: 0, timer: null};\n        this.toggle = this.toggle.bind(this)\n        this.reset = this.reset.bind(this)\n        this.chronoService = new ChronoService()\n    }\n\n    componentWillUnmount() {\n        this.pause()\n    }\n\n    updateChrono() {\n        this.setState({n: this.state.n + 1})\n    }\n\n    reset(e) {\n        this.setState({n: 0})\n    }\n\n    play(e) {\n        if (this.state.timer !== null) return;\n\n        window.clearInterval(this.state.timer)\n        this.setState({timer: window.setInterval(this.updateChrono.bind(this), 1000)})\n    }\n\n    pause(e) {\n        window.clearInterval(this.state.timer)\n        this.setState({timer: null});\n    }\n\n    toggle() {\n        return this.state.timer ? this.pause() : this.play();\n    }\n\n    label() {\n        return this.state.timer ? 'pause' : 'play';\n    }\n\n    render() {\n        return <div className=\"Chrono\">\n            <div>{this.chronoService.toHHMMSS(this.state.n)}</div>\n            <button onClick={this.toggle} className=\"btn btn-light mx-5\">{this.label()}</button>\n            <button onClick={this.reset} className=\"btn btn-light mx-5\">Reset</button>\n        </div>\n    }\n}\n\nexport default Chrono","import React from 'react';\n\nimport './App.css';\n\nimport Chrono from '../../components/Chrono/Chrono'\n\nclass App extends React.Component {\n  render() {\n    return <article className=\"App d-flex\">\n      <Chrono />\n    </article>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}